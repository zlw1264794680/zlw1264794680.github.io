import{_ as a,o as e,c as t,d as i}from"./chunks/framework.ad53f7b3.js";const l=JSON.parse('{"title":"5. 线程模型","description":"","frontmatter":{},"headers":[{"level":2,"title":"渲染场景","slug":"渲染场景","link":"#渲染场景","children":[{"level":3,"title":"在后台线程中渲染","slug":"在后台线程中渲染","link":"#在后台线程中渲染","children":[]},{"level":3,"title":"在 UI 线程中渲染","slug":"在-ui-线程中渲染","link":"#在-ui-线程中渲染","children":[]},{"level":3,"title":"默认或连续事件中断","slug":"默认或连续事件中断","link":"#默认或连续事件中断","children":[]},{"level":3,"title":"离散事件中断","slug":"离散事件中断","link":"#离散事件中断","children":[]},{"level":3,"title":"后台线程从 JavaScript 批量更新","slug":"后台线程从-javascript-批量更新","link":"#后台线程从-javascript-批量更新","children":[]},{"level":3,"title":"C++ 状态更新","slug":"c-状态更新","link":"#c-状态更新","children":[]}]}],"relativePath":"front-end/react/react-native/08. RN架构/5. 线程模型.md"}'),r={name:"front-end/react/react-native/08. RN架构/5. 线程模型.md"},c=[i('<h1 id="_5-线程模型" tabindex="-1">5. 线程模型 <a class="header-anchor" href="#_5-线程模型" aria-label="Permalink to &quot;5. 线程模型&quot;">​</a></h1><p><strong>React Native 渲染器将渲染管道的工作分配给多个线程。</strong></p><p>在这里，我们定义了线程模型并提供了一些示例来说明渲染管道的线程使用情况。</p><p>React Native 渲染器被设计为线程安全的。 通过在框架内部使用不可变的数据结构（由 C++“const 正确性”特性强制执行），可以保证高级别的线程安全。 这意味着 React 中的每次更新都会在渲染器中创建或克隆新对象，而不是更新数据结构。 这允许框架向 React 公开线程安全和同步的 API。</p><p>渲染器使用三个不同的线程：</p><ul><li>UI 线程（通常称为 main）：唯一可以操作主机视图的线程。</li><li>JavaScript 线程：这是执行 React 的渲染阶段的地方。</li><li>后台线程：专用于布局的线程。</li></ul><p>让我们回顾一下每个阶段支持的执行场景：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-07-15-084638.png" alt="image-20220715164637383" style="zoom:50%;"><h2 id="渲染场景" tabindex="-1">渲染场景 <a class="header-anchor" href="#渲染场景" aria-label="Permalink to &quot;渲染场景&quot;">​</a></h2><h3 id="在后台线程中渲染" tabindex="-1">在后台线程中渲染 <a class="header-anchor" href="#在后台线程中渲染" aria-label="Permalink to &quot;在后台线程中渲染&quot;">​</a></h3><p>这是最常见的场景，大多数渲染管道发生在JavaScript和后台线程上。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-07-15-084657.png" alt="image-20220715164656967"></p><h3 id="在-ui-线程中渲染" tabindex="-1">在 UI 线程中渲染 <a class="header-anchor" href="#在-ui-线程中渲染" aria-label="Permalink to &quot;在 UI 线程中渲染&quot;">​</a></h3><p>当 UI 线程上有高优先级事件时，渲染器能够在 UI 线程上同步执行所有的渲染管道。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-07-15-084711.png" alt="image-20220715164711532"></p><h3 id="默认或连续事件中断" tabindex="-1">默认或连续事件中断 <a class="header-anchor" href="#默认或连续事件中断" aria-label="Permalink to &quot;默认或连续事件中断&quot;">​</a></h3><p>这个场景显示了渲染阶段被 UI 线程中的低优先级事件中断。 React 和 React Native 渲染器能够中断渲染阶段并将其状态与在 UI 线程上执行的低优先级事件合并。 在这种情况下，渲染进程继续在后台线程中执行。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-07-15-084727.png" alt="image-20220715164726985"></p><h3 id="离散事件中断" tabindex="-1">离散事件中断 <a class="header-anchor" href="#离散事件中断" aria-label="Permalink to &quot;离散事件中断&quot;">​</a></h3><p>渲染阶段是可中断的。 这个场景显示了渲染阶段被 UI 线程中的高优先级事件中断。 React 和渲染器能够中断渲染阶段并将其状态与在 UI 线程上执行的高优先级事件合并。 渲染阶段在 UI 线程上同步执行。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-07-15-084742.png" alt="image-20220715164742326"></p><h3 id="后台线程从-javascript-批量更新" tabindex="-1">后台线程从 JavaScript 批量更新 <a class="header-anchor" href="#后台线程从-javascript-批量更新" aria-label="Permalink to &quot;后台线程从 JavaScript 批量更新&quot;">​</a></h3><p>在后台线程向 UI 线程发送更新之前，它会检查是否有来自 JavaScript 的更新。 这样，当渲染器知道有新状态进入时，它就不会渲染陈旧状态。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-07-15-084757.png" alt="image-20220715164756808"></p><h3 id="c-状态更新" tabindex="-1">C++ 状态更新 <a class="header-anchor" href="#c-状态更新" aria-label="Permalink to &quot;C++ 状态更新&quot;">​</a></h3><p>源自 UI 线程的更新并跳过渲染阶段。 有关更多详细信息，请参阅 React Native 渲染器状态更新。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-07-15-084813.png" alt="image-20220715164812445"></p><p>-<em>EOF</em>-</p>',28)];const n=a(r,[["render",function(a,i,l,r,n,s){return e(),t("div",null,c)}]]);export{l as __pageData,n as default};
