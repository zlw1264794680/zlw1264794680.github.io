import{_ as s,o as n,c as a,d as l}from"./chunks/framework.4d89205b.js";const p=JSON.parse('{"title":"ScrollView 组件","description":"","frontmatter":{},"headers":[{"level":2,"title":"布局失效、无法滚动到底部","slug":"布局失效、无法滚动到底部","link":"#布局失效、无法滚动到底部","children":[{"level":3,"title":"定义布局：上下固定，中间撑开滚动","slug":"定义布局-上下固定-中间撑开滚动","link":"#定义布局-上下固定-中间撑开滚动","children":[]},{"level":3,"title":"解决问题","slug":"解决问题","link":"#解决问题","children":[]}]}],"relativePath":"front-end/react/react-native/10.踩坑总结/ScrollView组件.md"}'),o={name:"front-end/react/react-native/10.踩坑总结/ScrollView组件.md"},e=[l('<h1 id="scrollview-组件" tabindex="-1">ScrollView 组件 <a class="header-anchor" href="#scrollview-组件" aria-label="Permalink to &quot;ScrollView 组件&quot;">​</a></h1><p>一个封装了平台的 ScrollView（滚动视图）的组件，同时还集成了触摸锁定的“响应者”系统。</p><p>记住 ScrollView 必须有一个确定的高度才能正常工作，因为它实际上所做的就是将一系列不确定高度的子组件装进一个确定高度的容器（通过滚动操作）。</p><p>要给 ScrollView 一个确定的高度的话，要么直接给它设置高度（不建议），要么确定所有的父容器都有确定的高度。一般来说我们会给 ScrollView 设置 <code>flex: 1</code> 以使其自动填充父容器的空余空间，但前提条件是所有的父容器本身也设置了 flex 或者指定了高度，否则就会导致无法正常滚动，你可以使用元素查看器来查找具体哪一层高度不正确。</p><h2 id="布局失效、无法滚动到底部" tabindex="-1">布局失效、无法滚动到底部 <a class="header-anchor" href="#布局失效、无法滚动到底部" aria-label="Permalink to &quot;布局失效、无法滚动到底部&quot;">​</a></h2><blockquote><p>因为 react-native 还处于 0.xx 的版本迭代。所以，无法确定今后是否会调整该功能，从而解决问题。</p><p>因此，记录当前时间 <code>2023-4-22</code></p></blockquote><h3 id="定义布局-上下固定-中间撑开滚动" tabindex="-1">定义布局：上下固定，中间撑开滚动 <a class="header-anchor" href="#定义布局-上下固定-中间撑开滚动" aria-label="Permalink to &quot;定义布局：上下固定，中间撑开滚动&quot;">​</a></h3><p>想要的效果图如下：</p><p><img src="/assets/1682143731764.efa36921.jpg" alt=""></p><p>ScrollView 样式上的俩个属性：<code>style</code> 和 <code>contentContainerStyle</code> 。<code>style</code> 是定义组件的样式，而 <code>contentContainerStyle</code> 是定义组件内部的样式。</p><p>滚动列表的几种写法：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 第一种</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> List </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ScrollView</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">={{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">flexGrow</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}}&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/* 元素 */</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">ScrollView</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#F07178;">  )</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 第二种</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> List </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ScrollView</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">contentContainerStyle</span><span style="color:#89DDFF;">={{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">flexGrow</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}}&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/* 元素 */</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">ScrollView</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#F07178;">  )</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 第三种</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> List </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ScrollView</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">contentContainerStyle</span><span style="color:#89DDFF;">={{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">flex</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}}&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/* 元素 */</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">ScrollView</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#F07178;">  )</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>上面三种写法，在正常情况下没问题。但是，当 ScrollView 组件之上，还有个固定的搜索宽，或者底部还有个固定的选项卡。继续采用上面的写法就会有问题，如下:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> App </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> （</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">View</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">={{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">flex</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}}&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/* 搜索框+按钮 */</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">List</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/* 选项卡 */</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">View</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#F07178;">  ）</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>如上写法，在页面呈现上如下：</p><p><img src="/assets/1682144184161.69479437.jpg" alt=""></p><p>本意是，上下固定，中间撑开滚动。可实际上的效果是，底下部分，会被中间部分顶出去的。</p><p>且这种情况下的 ScrollView 组件，是无法滚动到底部的。因为在这种样式设置下，内部滚动的高度还是屏幕高度的！！！但它外部高度，却被分出俩块高度给顶上部分和底下部分。</p><h3 id="解决问题" tabindex="-1">解决问题 <a class="header-anchor" href="#解决问题" aria-label="Permalink to &quot;解决问题&quot;">​</a></h3><ul><li>上下固定，中间撑开滚动</li><li>无法滚动到底</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> List </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ScrollView</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">={{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">flex</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}}&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/* 元素 */</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">ScrollView</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#F07178;">  )</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>呜呜呜~~~，真的这么简单！！！</p>',22)];const t=s(o,[["render",function(s,l,p,o,t,c){return n(),a("div",null,e)}]]);export{p as __pageData,t as default};
